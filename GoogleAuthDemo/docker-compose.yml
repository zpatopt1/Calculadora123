version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - "8000:80"
    environment:
      - PORT=8000
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - elastic

  nova_calculadora:
    build:
      context: .
      dockerfile: dockerfile2
    ports:
      - "9000:9000"
    environment:
      - PORT=9000
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - elastic
  # apm-server:
  #   image: docker.elastic.co/apm/apm-server:7.15.2
  #   ports:
  #   - 8200:8200
  #   networks:
  #   - elastic
  #   command: >
  #      apm-server -e
  #        -E apm-server.rum.enabled=true
  #        -E setup.kibana.host=kibana:5601
  #        -E setup.template.settings.index.number_of_replicas=0
  #        -E apm-server.kibana.enabled=true
  #        -E apm-server.kibana.host=kibana:5601
  #        -E output.elasticsearch.hosts=["elasticsearch:9200"]



  prometheus:
    image: prom/prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana_data:/var/lib/grafana

      
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      xpack.monitoring.enabled: "true"
      xpack.watcher.enabled: "false"
      cluster.routing.allocation.disk.threshold_enabled: "false"
    volumes:
      - ./esdata:/usr/share/elasticsearch/data
    networks:
      - elastic

      # cluster.routing.allocation.disk.threshold_enabled: "true"
      # cluster.routing.allocation.disk.watermark.low: "85%"
      # cluster.routing.allocation.disk.watermark.high: "90%"

      
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - elastic

networks:
  elastic:
    driver: bridge

volumes:
  esdata:
    driver: local
  grafana_data:
    driver: local



# version: '3.8'

# services:
#   web:
#     build:
#       context: .
#       dockerfile: dockerfile
#     ports:
#       - "8000:80"
#     environment:
#       ASPNETCORE_ENVIRONMENT: "Development"


#   prometheus:
#     image: prom/prometheus
#     ports:
#       - '9090:9090'
#     volumes:
#       - ./prometheus.yml:/etc/prometheus/prometheus.yml
#     command:
#       - '--config.file=/etc/prometheus/prometheus.yml'


#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
#     ports:
#       - "9200:9200"
#       - "9300:9300"
#     environment:
#       discovery.type: "single-node"
#       ES_JAVA_OPTS: "-Xms2g -Xmx2g"
#       xpack.monitoring.enabled: "true"
#     volumes:
#       - ./esdata:/usr/share/elasticsearch/data
      
#   kibana:
#     image: docker.elastic.co/kibana/kibana:7.7.0
#     ports:
#       - "5601:5601"
#     environment:
#       ELASTICSEARCH_URL: http://elasticsearch:9200
#     depends_on:
#       - elasticsearch
      
# volumes:
#   esdata:
#     driver: local



#   grafana:
#     image: grafana/grafana
#     ports:
#       - "3001:3000"
#     depends_on:
#       - prometheus
#     networks:
#       - backend

#   setup:
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     container_name: setup
#     user: "0"
#     command: >
#       bash -c '
#         echo "Setup...";
#         if [ x${ELASTIC_PASSWORD} == x ]; then
#           echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
#           exit 1;
#         fi;
#         if [ x${KIBANA_PASSWORD} == x ]; then
#           echo "Set the KIBANA_PASSWORD environment variable in the .env file";
#           exit 1;
#         fi;
#         if [ x${SERVICEUSER_PASSWORD} == x ]; then
#           echo "Set the SERVICEUSER_PASSWORD environment variable in the .env file";
#           exit 1;
#         fi;
#         if [ ${SERVICEUSER_USERNAME} == elastic ]; then
#           echo "SERVICEUSER_USERNAME environment variable can not be elastic. Change it in the .env file";
#           exit 1;
#         fi;
#         if [ "x${APP_LOGS_INDEX}" == "x" ]; then
#           echo "Set APP_LOGS_INDEX environment variable in the .env file";
#           exit 1;
#         fi;
#         touch config/done;
#         echo "Waiting for Elasticsearch availability...";
#         until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
#         echo "Setting kibana_system password...";
#         until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
#         echo "Setting service user role...";
#         until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/role/service_user_role?pretty -d "{\"indices\": [{\"names\": [ \"${APP_LOGS_INDEX}\" ],\"privileges\": [\"all\"]}]}" | grep -q "created"; do sleep 10; done;
#         echo "Setting service user...";
#         until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/${SERVICEUSER_USERNAME} -d "{\"password\":\"${SERVICEUSER_PASSWORD}\",\"full_name\":\"${SERVICEUSER_FULLNAME}\",\"email\":\"${SERVICEUSER_EMAIL}\",\"roles\":[\"reporting_user\",\"kibana_admin\",\"service_user_role\"]}" | grep -q "created"; do sleep 10; done;
#         echo "All done!"
#       '
#     healthcheck:
#       test: ["CMD-SHELL", "[ -f config/done ]"]
#       interval: 1s
#       timeout: 5s
#       retries: 300
#     networks:
#       - elastic

#   app:
#     build:
#       context: ./WebLibraryApp
#       dockerfile: Dockerfile
#     container_name: app
#     environment:
#       - USE_DEVELOPMENT_SEED=TRUE
#       - USE_SERILOG_DEBUGGING=TRUE
#       - ElasticsearchOptions:ConnectionUsername=${SERVICEUSER_USERNAME}
#       - ElasticsearchOptions:ConnectionPassword=${SERVICEUSER_PASSWORD}
#     ports:
#       - "8040:80"
#       - "44340:443"
#     depends_on:
#       sqlServer:
#         condition: service_healthy
#       kibana:
#         condition: service_healthy
#     networks:
#       - elastic
        
#   sqlServer:
#     image: "mcr.microsoft.com/mssql/server:2019-latest"
#     depends_on:
#       setup:
#         condition: service_healthy
#     container_name: sqlServer
#     volumes:
#       - sqlserverdata:/data
#     environment:
#       - ACCEPT_EULA=Y
#       - MSSQL_SA_PASSWORD=${MSSQL_PASSWORD}
#     ports:
#       - "1433:1433"
#     healthcheck:
#       test: [
#         "CMD", "/opt/mssql-tools/bin/sqlcmd", 
#         "-U", "sa", 
#         "-P", "${MSSQL_PASSWORD}", 
#         "-Q", "SELECT \"READY\""]
#       interval: 15s
#       timeout: 5s
#       retries: 300
#     networks:
#       - elastic

#   elasticsearch:
#     depends_on:
#       setup:
#         condition: service_healthy
#     container_name: elasticsearch
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     ports:
#       - ${ES_PORT}:9200
#     volumes:
#       - elasticsearch-data:/usr/share/elasticsearch/data
#     environment:
#       - cluster.name=${CLUSTER_NAME}
#       - discovery.type=single-node
#       - xpack.watcher.enabled=false
#       - xpack.security.enabled=true
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#       - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s -I -u elastic:${ELASTIC_PASSWORD} http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 300
#     networks:
#       - elastic

#   kibana:
#     depends_on:
#       elasticsearch:
#         condition: service_healthy
#     container_name: kibana
#     image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
#     volumes:
#       - kibanadata:/usr/share/kibana/data
#     ports:
#       - ${KIBANA_PORT}:5601
#     environment:
#       - SERVERNAME=kibana
#       - ELASTICSEARCH_USERNAME=kibana_system
#       - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
#       - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 300
#     networks:
#       - elastic
  
# networks:
#   elastic:
#     driver: bridge

# volumes:
#   elasticsearch-data:
#     driver: local
#   sqlserverdata:
#     driver: local
#   kibanadata:
#     driver: local
