version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: dockerfile
    ports:
      - "8000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
    networks:
      - elastic
      
  apm-server:
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    networks:
    - elastic
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g

    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    networks:
    - elastic
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s --cacert certs/ca/ca.crt https://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      xpack.encryptedSavedObjects.encryptionKey: "e76025527ba8490283a5b3e784dac4b6"
      xpack.actions.enabled: true
      xpack.reporting.enabled: true
      xpack.alerting.enabled: true
      SERVER_SSL_CERTIFICATE: /usr/share/kibana/config/certs/kibana.crt
      SERVER_SSL_KEY: /usr/share/kibana/config/certs/kibana.key
      SERVER_SSL_ENABLED: "true"
    ports:
    - 5601:5601
    networks:
    - elastic
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status


  watcher_setup:
      image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
      volumes:
        # - ./watcher-config.json:/watcher-config.json
        - certs:/usr/share/elasticsearch/config/certs
      user: "0"
      command: >
        bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting up Watcher";
        bin/elasticsearch-setup-passwords auto -u "https://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200" --batch;
        curl -XPUT -H "Content-Type: application/json" --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" https://elasticsearch:9200/_watcher/watch/my_watch -d @/watcher-config.json;
        echo "All done!";
        '
      depends_on:
        elasticsearch:
          condition: service_healthy
      healthcheck:
        test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
        interval: 1s
        timeout: 5s
        retries: 120


  prometheus:
    image: prom/prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana_data:/var/lib/grafana

networks:
  elastic:
    driver: bridge
volumes:
  esdata:
    driver: local
  grafana_data:
    driver: local
  certs:
    driver: local
